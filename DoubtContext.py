from enum import Enum
from TimingMessageContext import *
from Constants import *
from Entities import *


class DoubtState(Enum):
    DoubtWelcome = 1
    DoubtStart = 2
    InterruptAction = 3
    LoseDoubt = 4

class DoubtStateMachine:
    def __init__(self):
        self.state = DoubtState.DoubtWelcome

        self.transitions = {
                            DoubtState.DoubtWelcome: [DoubtState.DoubtStart],
                            DoubtState.DoubtStart: [DoubtState.InterruptAction, DoubtState.LoseDoubt],
                            }

    def applyState(self, state):
        if state in self.transitions[self.state]:
            self.state = state
            return True
        return False



class DoubtContext:

    def __init__(self, actionType, game, activePlayer, callbackDataAlias, continueActionHandler, abortActionHandler):
        self.actionType = actionType
        self.game = game
        self.activePlayer = activePlayer
        self.doubtedPlayer = None
        self.callbackDataAlias = callbackDataAlias
        self.continueActionHandler = continueActionHandler
        self.abortActionHandler = abortActionHandler

        self.timingMessageContext = None
        self.currentDoubtedPlayerPersonalMessageId = 0

        self.stateMachine = DoubtStateMachine()

    def start(self):
        baseText = self.doubtWelcomeText()
        buttons = [[{'text': '–Ø —É—Å–æ–º–Ω—è—é—Å—å',
                     'callbackData': self.callbackDataAlias}]]

        text = baseText + '\n' + TimingMessageContext.timingStringFor(DOUBT_TIMER, DOUBT_TIMER)

        self.doubtActivePlayerCommonMessageId = sendMessage(self.game.gameGroupchatId, text, buttons)

        self.timingMessageContext = TimingMessageContext(DOUBT_TIMER, self.game.gameGroupchatId,
                                                         self.doubtActivePlayerCommonMessageId, baseText, buttons,
                                                         self.handleTimerEnd)
        self.timingMessageContext.startAnimate()

    def handleTimerEnd(self):
        self.continueActionHandler()

    def handleSomeoneDoubtActivePlayer(self, action, chatId, userId, queryId, messageId):

        applyStateResult = self.stateMachine.applyState(DoubtState.DoubtStart)
        if applyStateResult == False:
            answerCallbackQuery(queryId, '–ü–æ–∑–¥–Ω–æ..')
            return

        if self.doubtActivePlayerCommonMessageId != messageId:
            answerCallbackQuery(queryId, '–ü–æ–∑–¥–Ω–æ..')
            return

        answerCallbackQuery(queryId)

        self.timingMessageContext.stopAnimate()
        self.doubtActivePlayerCommonMessageId = 0

        activePlayer = self.activePlayer
        doubtedPlayer = self.game.findPlayerByUserId(userId)
        self.doubtedPlayer = doubtedPlayer

        doubtCardName = self.actionType.name

        wrong = activePlayer.hasCardByName(doubtCardName)
        die = False
        if wrong:
            if doubtedPlayer.cardsCount() == 1:
                die = True
        else:
            if activePlayer.cardsCount() == 1:
                die = True

        if wrong:
            self.game.returnPlayerCardAndGetNew(activePlayer, doubtCardName)

            sendMessage(activePlayer.user.userId, activePlayer.playerCardsString())

            if die:
                lostedCard = doubtedPlayer.killOneCard()
                self.sendDoubtResultMessage(wrong, die, lostedCard, doubtCardName)

                self.continueActionHandler()
            else:
                self.stateMachine.applyState(DoubtState.LoseDoubt)

                self.sendDoubtResultMessage(wrong, die, '', doubtCardName)
                self.sendCardOpenPersonalMessage(doubtedPlayer, False)


        else:
            self.stateMachine.applyState(DoubtState.InterruptAction)

            if die:
                lostedCard = activePlayer.killOneCard()
                self.sendDoubtResultMessage(wrong, die, lostedCard, doubtCardName)
                self.abortActionHandler()

            else:
                self.sendDoubtResultMessage(wrong, die, '', doubtCardName)
                self.sendCardOpenPersonalMessage(activePlayer, True)

    def handleChooseCardToOpenByDoubt(self, action, chatId, userId, queryId, messageId):
        currentPlayer = None
        if self.stateMachine.state == DoubtState.LoseDoubt:
            currentPlayer = self.doubtedPlayer
        elif self.stateMachine.state == DoubtState.InterruptAction:
            currentPlayer = self.activePlayer
        else:
            answerCallbackQuery(queryId, '–ö—É–¥—ã —Ç—ã—á–∏—à—å!? –ù–µ —Ç—É–¥–∞..')
            return

        if userId != currentPlayer.user.userId:
            answerCallbackQuery(queryId, '–ö—É–¥—ã —Ç—ã—á–∏—à—å!? –ù–µ —Ç–≤–æ–µ..')
            return
        if self.currentDoubtedPlayerPersonalMessageId != messageId:
            answerCallbackQuery(queryId, '–ö—É–¥—ã —Ç—ã—á–∏—à—å!? –ù–µ —Ç—É–¥–∞..')
            return

        answerCallbackQuery(queryId)

        choosenCardName = action.split(ACTION_DELIMETER)[1]
        currentPlayer.killCardByName(choosenCardName)

        sendMessage(self.game.gameGroupchatId,
                    '{}\n–æ—Ç–∫—Ä—ã–ª ‚ùå {}'.format(currentPlayer.user.combinedNameStrig(), choosenCardName))

        if self.stateMachine.state == DoubtState.LoseDoubt:
            self.continueActionHandler()
        elif self.stateMachine.state == DoubtState.InterruptAction:
            self.abortActionHandler()




    def doubtWelcomeText(self):
        userName = self.activePlayer.user.combinedNameStrig()

        text = '{} {}'.format(userName, self.doubtWelcomeTextTitle())
        text += '\n–ö—Ç–æ —Ö–æ—á–µ—Ç —É—Å–æ–º–Ω–∏—Ç—å—Å—è?\n\n'
        text += '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ {} —Å–µ–∫—É–Ω–¥'.format(DOUBT_TIMER)
        return text

    def doubtWelcomeTextTitle(self):
        text = ''
        if self.actionType == Card.Ambassador:
            text = '–∑–∞—è–≤–ª—è–µ—Ç, —á—Ç–æ –æ–Ω Ambassador –∏ —Ö–æ—á–µ—Ç –ø–æ—Ä—ã—Ç—å—Å—èüìö –≤ –∫–æ–ª–æ–¥–µ.'
        elif self.actionType == Card.Duke:
            text = '–∑–∞—è–≤–ª—è–µ—Ç, —á—Ç–æ –æ–Ω Duke –∏ —Ö–æ—á–µ—Ç –≤–∑—è—Ç—å 3 –º–æ–Ω–µ—Ç—ãü•â.'

        return text

    def sendDoubtResultMessage(self, wrong, die, lostedCard, doubtCardName):
        activePlayer = self.activePlayer
        doubtedPlayer = self.doubtedPlayer

        text = doubtedPlayer.user.combinedNameStrig() + '\n'
        text += '—É—Å–æ–º–Ω–∏–ª—Å—è '
        # text += '—É—Å–æ–º–Ω–∏–ª—Å—è –≤\n'
        # text += activePlayer.user.combinedNameStrig() + '\n'

        if wrong:
            if die:
                text += ', –ù–û –æ–∫–∞–∑–∞–ª—Å—è –ù–ï –ø—Ä–∞–≤ –∏ —Å–∞–º–æ—É–±–∏–ª—Å—è! üíÄ' + '\n'
                text += '‚ùå ' + lostedCard.openedString()
            else:
                text += '–∏ –æ–∫–∞–∑–∞–ª—Å—è –ù–ï –ø—Ä–∞–≤!' + '\n'
                text += '–¢–µ–ø–µ—Ä—å –æ–Ω –≤—Å–∫—Ä—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É'

            text += '\n\n'
            text += 'A {} —É—Ç—Ä–∞—Ç–∏–ª {} –∏ –≤–∑—è–ª –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã'.format(
                activePlayer.user.combinedNameStrig(), doubtCardName)
        else:
            text += '–∏ –æ–∫–∞–∑–∞–ª—Å—è –ü–†–ê–í!'
            text += '\n\n'

            if die:
                text += '{} —É–º–µ—Ä üíÄ'.format(activePlayer.user.combinedNameStrig()) + '\n'
                text += '‚ùå ' + lostedCard.openedString()
            else:
                text += '{} –≤—Å–∫—Ä—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É'.format(activePlayer.user.combinedNameStrig()) + '\n'

        sendMessage(self.game.gameGroupchatId, text)

    def sendCardOpenPersonalMessage(self, player, active):
        text = ''
        if active:
           text = '–í–∞—Å —É–ª–∏—á–∏–ª–∏ –≤ –æ–±–º–∞–Ω–µ ü§• \n–ö–∞–∫—É—é –∫–∞—Ä—Ç—É –æ—Ç–∫—Ä–æ–µ–º?'
        else:
           text = '–í—ã –Ω–∞—á–∞–ª–∏ –∫–∞—Ç–∏—Ç—å üõ¢–±–æ—á–∫—É –∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ –ø—Ä–∞–≤—ã\n–ö–∞–∫—É—é –∫–∞—Ä—Ç—É –æ—Ç–∫—Ä–æ–µ–º?'

        buttons = []
        for card in player.cards:
            buttons.append([{'text': card.name,
                             'callbackData': '{}{}{}'.format(StepAction.chooseCardToOpenByDoubt.name,
                                                             ACTION_DELIMETER,
                                                             card.name)}])
        self.currentDoubtedPlayerPersonalMessageId = sendMessage(player.user.userId,
                                                                 text,
                                                                 buttons)